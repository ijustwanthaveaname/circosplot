#!/usr/bin/python
# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------------------------------------------
# Function: extract link file for circos to visualization by given gff and collinear file generated by MCScanX.
# -------------------------------------------------------------------------------------------------------------
import getopt
import sys
import re


def getoptfromcmd():
    opts, args = getopt.getopt(sys.argv[1:], "-c:-g:-o:")
    for opt_name, opt_value in opts:
        if opt_name == "-c":
            collinearpath = opt_value
        if opt_name == "-g":
            gffpath = opt_value
        if opt_name == "-o":
            linkpath = opt_value
    return collinearpath, gffpath, linkpath


def getlink(collinearpath, gffpath, linkpath):
    postable = {}
    with open(gffpath, "rt") as fp:
        for rec in fp:
            chrname = rec.strip().split("\t")[0]
            genename = rec.strip().split("\t")[1]
            start = rec.strip().split("\t")[2]
            end = rec.strip().split("\t")[3]
            postable[genename] = [chrname, start, end]
    collist = []
    with open(collinearpath, "rt") as fp:
        blocklist = []
        while True:
            firstheader = next(fp)
            if not firstheader.startswith("## Alignment 0"):
                continue
            else:
                break
        strand = firstheader.strip().split(" ")[-1]
        for line in fp:
            if line.startswith("## Alignment"):
                block1_chr = postable[blocklist[0][0]][0]
                block1_start = postable[blocklist[0][0]][1]
                block1_end = postable[blocklist[-1][0]][2]
                block2_chr = postable[blocklist[0][1]][0]
                if strand == "plus":
                    block2_start = postable[blocklist[0][1]][1]
                    block2_end = postable[blocklist[-1][1]][2]
                else:
                    block2_start = postable[blocklist[-1][1]][1]
                    block2_end = postable[blocklist[0][1]][2]
                blocklist = []
                collist.append([block1_chr, block1_start, block1_end, 
                    block2_chr, block2_start, block2_end])
                strand = line.strip().split(" ")[-1]                
            else:
                blocklist.append([re.split("\s+", line)[3], re.split("\s+", line)[4]])
        block1_chr = postable[blocklist[0][0]][0]
        block1_start = postable[blocklist[0][0]][1]
        block1_end = postable[blocklist[-1][0]][2]
        block2_chr = postable[blocklist[0][1]][0]
        if strand == "plus":
            block2_start = postable[blocklist[0][1]][1]
            block2_end = postable[blocklist[-1][1]][2]
        else:
            block2_start = postable[blocklist[-1][1]][1]
            block2_end = postable[blocklist[0][1]][2]
        blocklist = []
        collist.append([block1_chr, block1_start, block1_end, 
            block2_chr, block2_start, block2_end])
        with open(linkpath, "wt") as fp:
            for link in collist:
                fp.write(" ".join(link)+"\n")

            
if __name__ == '__main__':
   collinearpath, gffpath, linkpath = getoptfromcmd()
   getlink(collinearpath, gffpath, linkpath)
